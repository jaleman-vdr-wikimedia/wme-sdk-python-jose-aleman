"""
A script to showcase the different log messages generated by the Wikimedia SDK's
ApiClient, using the project's standard authentication and session management.

Prerequisites:
- A .env file in the project root with WME_USERNAME and WME_PASSWORD.

Usage:
- Run the script from the project's root directory:
  python -m example.logging.logging
"""

import logging
import sys
import contextlib
import io
from unittest.mock import patch, MagicMock
from datetime import datetime
from modules.auth.auth_client import AuthClient
from modules.api.api_client import Client as ApiClient, Request
from modules.api.exceptions import APIStatusError, APIRequestError, APIDataError

# ==============================================================================
# Set to DEBUG to see all messages, with a detailed format.
# ==============================================================================
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)


@contextlib.contextmanager
def revoke_token_on_exit(auth_client, refresh_token):
    """Context manager to ensure the refresh token is revoked on exit."""
    try:
        yield
    finally:
        logger.info("Script finished. Revoking refresh token...")
        try:
            auth_client.revoke_token(refresh_token)
            logger.info("Token successfully revoked.")
        except (APIRequestError, APIStatusError, APIRequestError) as e:
            logger.error("Failed to revoke token: %s", e)


def main():
    """Main function to run the showcase."""
    logger.info("--- Starting Logging Showcase with Full Authentication ---")

    # --- Authentication Flow ---
    auth_client = AuthClient()
    try:
        login_response = auth_client.login()
    except (APIRequestError, APIStatusError, APIRequestError) as e:
        logger.fatal("Login failed: %s", e)
        return

    refresh_token = login_response["refresh_token"]
    access_token = login_response["access_token"]
    logger.info("Successfully logged in and obtained tokens.")

    # The rest of the script runs inside this secure context
    with revoke_token_on_exit(auth_client, refresh_token):
        api_client = ApiClient()
        api_client.set_access_token(access_token)
        logger.info("SDK Client initialized with access token.")

        # ======================================================================
        # DEMO 1: SUCCESSFUL REQUEST (triggers DEBUG logs)
        # ======================================================================
        print("\n" + "="*60)
        logger.info("--- 1. Demonstrating DEBUG logs for a successful request ---")
        try:
            project = api_client.get_project("enwiki", Request())
            logger.info("Successfully fetched project: %s", project.get('name'))
        except (APIRequestError, APIStatusError, APIRequestError) as e:
            logger.error("This was not supposed to fail! Error: %s", e)
        print("="*60)

        # ======================================================================
        # DEMO 2: HTTP STATUS ERROR (triggers ERROR logs)
        # ======================================================================
        print("\n" + "="*60)
        logger.info("--- 2. Demonstrating ERROR logs for a 404 Not Found ---")
        try:
            api_client.get_project("nonexistent-project", Request())
        except APIStatusError:
            logger.info("Caught expected APIStatusError. Check the line above this error for the SDK's ERROR log.")
        print("="*60)

        # ======================================================================
        # DEMO 3: NETWORK REQUEST ERROR (triggers ERROR logs)
        # ======================================================================
        print("\n" + "="*60)
        logger.info("--- 3. Demonstrating ERROR logs for a network timeout ---")
        try:
            timeout_client = ApiClient(access_token=access_token, timeout=0.01)
            timeout_client.get_project("enwiki", Request())
        except APIRequestError:
            logger.info("Caught expected APIRequestError. Check the line above this error for the SDK's Request Error log.")
        print("="*60)

        # ==========================================================================
        # EXPLANATION 4: RATE LIMITING (triggers WARNING logs)
        # ==========================================================================
        print("\n" + "="*60)
        logger.info("--- 4. Explaining WARNING logs (429 Too Many Requests) ---")
        logger.info("If the SDK received a 429 status code from the API, it would log a WARNING.")
        logger.info("Example: 'WARNING - Received 429 Too Many Requests. Client may retry.'")
        print("="*60)

        # ======================================================================
        # DEMO 5: JSON DECODE WARNING in _read_loop
        # ======================================================================
        print("\n" + "="*60)
        logger.info("--- 5. Demonstrating WARNING for a JSON Decode Error in a batch read ---")
        mock_response = MagicMock()
        mock_response.content = b'{"name": "valid"}\n{"name": "bad", "extra"}\n{"name": "also_valid"}'
        with patch.object(api_client, '_request', return_value=mock_response):
            try:
                def callback(article):
                    logger.info("Callback received valid article: %s", article.get('name'))
                api_client.read_batch(datetime.now(), "fake-batch-id", callback)
                logger.info("Caught expected JSON Decode Warning. Notice the SDK logged it but did not crash.")
            except (APIRequestError, APIStatusError, APIDataError) as e:
                logger.error("This was not supposed to crash! Error: %s", e)
        print("="*60)

        # ======================================================================
        # DEMO 6: DOWNLOAD FAILED (CRITICAL log for APIRequestError)
        # ======================================================================
        print("\n" + "="*60)
        logger.info("--- 6. Demonstrating CRITICAL log for a failed download (Network Error) ---")

        mock_success_response = MagicMock()
        mock_success_response.content = b'this is fake chunk data'

        network_error_sequence = [
            mock_success_response,
            APIRequestError("Simulated network failure on the second chunk.", request=None)
        ]

        api_client.download_chunk_size = 1000
        with patch.object(api_client, '_head_entity', return_value={'Content-Length': 2000}):
            with patch.object(api_client, '_request', side_effect=network_error_sequence):
                try:
                    api_client.download_batch(datetime.now(), "fake-download-id", io.BytesIO())
                except APIRequestError:
                    logger.info("Caught expected APIRequestError. Check the line above this error for the SDK's CRITICAL log.")
        api_client.download_chunk_size = -1
        print("="*60)

        # ======================================================================
        # DEMO 7: DOWNLOAD FAILED (CRITICAL log for unexpected Exception)
        # ======================================================================
        print("\n" + "="*60)
        logger.info("--- 7. Demonstrating CRITICAL log for a failed download (Unexpected Error) ---")

        unexpected_error_sequence = [
            mock_success_response,
            TypeError("Simulated unexpected internal error!")
        ]

        api_client.download_chunk_size = 1000
        with patch.object(api_client, '_head_entity', return_value={'Content-Length': 2000}):
            with patch.object(api_client, '_request', side_effect=unexpected_error_sequence):
                try:
                    api_client.download_batch(datetime.now(), "fake-download-id", io.BytesIO())
                except APIDataError:
                    logger.info("Caught expected APIDataError. Check the line above this error for the SDK's CRITICAL log.")
        api_client.download_chunk_size = -1
        print("="*60)

        # ======================================================================
        # DEMO 8: STREAMING WARNING
        # ======================================================================
        print("\n" + "="*60)
        logger.info("--- 8. Explaining WARNING log for a bad line in a real-time stream ---")
        logger.info("The log 'Skipping malformed JSON line in stream' is for running connections.")
        logger.info("It allows the stream to stay open even if the server sends a corrupted line,")
        logger.info("making the client more resilient. For the sake of example brevity,")
        logger.info("we don't showcase that behavior here, but the principle is the same as Demo #5.")
        print("="*60)


if __name__ == "__main__":
    main()
