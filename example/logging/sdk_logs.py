"""
A script to showcase the different log messages generated by the Wikimedia SDK's
ApiClient, using the project's standard authentication and session management.

Prerequisites:
- A .env file in the project root with WME_USERNAME and WME_PASSWORD.

Usage:
- Run the script from the project's root directory:
  python -m example.logging.logging
"""

import logging
import sys
import contextlib
import io
from unittest.mock import patch, MagicMock
from datetime import datetime
from modules.auth.auth_client import AuthClient
from modules.api.api_client import Client as ApiClient, Request
from modules.api.exceptions import APIStatusError, APIRequestError, APIDataError

# ==============================================================================
# Set to DEBUG to see all messages, with a detailed format.
# ==============================================================================
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    stream=sys.stdout
)
logger = logging.getLogger(__name__)


@contextlib.contextmanager
def revoke_token_on_exit(auth_client, refresh_token):
    """Context manager to ensure the refresh token is revoked on exit."""
    try:
        yield
    finally:
        logger.info("Script finished. Revoking refresh token...")
        try:
            auth_client.revoke_token(refresh_token)
            logger.info("Token successfully revoked.")
        except (APIRequestError, APIStatusError, APIRequestError) as e:
            logger.error("Failed to revoke token: %s", e)

def print_demo_banner(demo_number, title):
    """Prints a consistent banner for each demo section."""
    print(f"\n{'='*60}")
    logger.info("--- %s. %s ---", demo_number, title)


def setup_clients():
    """Authenticates and returns initialized clients and tokens."""
    logger.info("--- Starting Logging Showcase with Full Authentication ---")
    auth_client = AuthClient()
    try:
        login_response = auth_client.login()
        logger.info("Successfully logged in and obtained tokens.")

        access_token = login_response["access_token"]
        refresh_token = login_response["refresh_token"]

        api_client = ApiClient()
        api_client.set_access_token(access_token)
        logger.info("SDK Client initialized with access token.")

        return auth_client, refresh_token, access_token, api_client

    except (APIRequestError, APIStatusError) as e:
        logger.fatal("Login failed: %s", e)
        return None, None, None, None


def run_demo_1_success(api_client):
    """Demonstrates DEBUG logs for a successful request."""
    print_demo_banner(1, "Demonstrating DEBUG logs for a successful request")
    try:
        project = api_client.get_project("enwiki", Request())
        logger.info("Successfully fetched project: %s", project.get('name'))
    except (APIRequestError, APIStatusError) as e:
        logger.error("This was not supposed to fail! Error: %s", e)
    print("="*60)


def run_demo_2_status_error(api_client):
    """Demonstrates ERROR logs for a 404 Not Found."""
    print_demo_banner(2, "Demonstrating ERROR logs for a 404 Not Found")
    try:
        api_client.get_project("nonexistent-project", Request())
    except APIStatusError:
        logger.info("Caught expected APIStatusError. Check above for the SDK's ERROR log.")
    print("="*60)


def run_demo_3_network_error(access_token):
    """Demonstrates ERROR logs for a network timeout."""
    print_demo_banner(3, "Demonstrating ERROR logs for a network timeout")
    try:
        timeout_client = ApiClient(access_token=access_token, timeout=0.01)
        timeout_client.get_project("enwiki", Request())
    except APIRequestError:
        logger.info("Caught expected APIRequestError. Check above for the SDK's Request Error log.")
    print("="*60)


def explain_demo_4_rate_limit():
    """Explains WARNING logs for 429 Too Many Requests."""
    print_demo_banner(4, "Explaining WARNING logs (429 Too Many Requests)")
    logger.info("If the SDK received a 429 status code, it would log a WARNING.")
    logger.info("Example: 'WARNING - Received 429 Too Many Requests. Client may retry.'")
    print("="*60)


def run_demo_5_json_decode(api_client):
    """Demonstrates WARNING for a JSON Decode Error in a batch read."""
    print_demo_banner(5, "Demonstrating WARNING for a JSON Decode Error in a batch read")
    mock_response = MagicMock()
    mock_response.content = b'{"name": "valid"}\n{"name": "bad", "extra"}\n{"name": "also_valid"}'

    with patch.object(api_client, '_request', return_value=mock_response):
        try:
            def callback(article):
                logger.info("Callback received valid article: %s", article.get('name'))

            api_client.read_batch(datetime.now(), "fake-batch-id", callback)
            logger.info("Caught expected JSON Decode Warning. SDK logged it but did not crash.")
        except (APIRequestError, APIStatusError, APIDataError) as e:
            logger.error("This was not supposed to crash! Error: %s", e)
    print("="*60)


def run_demo_6_download_network_error(api_client):
    """Demonstrates CRITICAL log for a failed download (Network Error)."""
    print_demo_banner(6, "Demonstrating CRITICAL log for a failed download (Network Error)")

    mock_success_response = MagicMock()
    mock_success_response.content = b'this is fake chunk data'
    network_error_sequence = [
        mock_success_response,
        APIRequestError("Simulated network failure on the second chunk.", request=None)
    ]

    api_client.download_chunk_size = 1000
    with patch.object(api_client, '_head_entity', return_value={'Content-Length': 2000}):
        with patch.object(api_client, '_request', side_effect=network_error_sequence):
            try:
                api_client.download_batch(datetime.now(), "fake-download-id", io.BytesIO())
            except APIRequestError:
                logger.info("Caught expected APIRequestError. Check above for the SDK's CRITICAL log.")
    api_client.download_chunk_size = -1
    print("="*60)


def run_demo_7_download_unexpected_error(api_client):
    """Demonstrates CRITICAL log for a failed download (Unexpected Error)."""
    print_demo_banner(7, "Demonstrating CRITICAL log for a failed download (Unexpected Error)")

    mock_success_response = MagicMock()
    mock_success_response.content = b'this is fake chunk data'
    unexpected_error_sequence = [
        mock_success_response,
        TypeError("Simulated unexpected internal error!")
    ]

    api_client.download_chunk_size = 1000
    with patch.object(api_client, '_head_entity', return_value={'Content-Length': 2000}):
        with patch.object(api_client, '_request', side_effect=unexpected_error_sequence):
            try:
                api_client.download_batch(datetime.now(), "fake-download-id", io.BytesIO())
            except APIDataError:
                logger.info("Caught expected APIDataError. Check above for the SDK's CRITICAL log.")
    api_client.download_chunk_size = -1
    print("="*60)


def explain_demo_8_stream_warning():
    """Explains WARNING log for a bad line in a real-time stream."""
    print_demo_banner(8, "Explaining WARNING log for a bad line in a real-time stream")
    logger.info("The log 'Skipping malformed JSON line in stream' is for running connections.")
    logger.info("It allows the stream to stay open even if the server sends a corrupted line.")
    logger.info("For brevity, we don't showcase that here, but the principle is the same as Demo #5.")
    print("="*60)


def main():
    """Main function to run the showcase."""
    auth_client, refresh_token, access_token, api_client = setup_clients()

    if not api_client:
        return

    with revoke_token_on_exit(auth_client, refresh_token):

        run_demo_1_success(api_client)
        run_demo_2_status_error(api_client)

        run_demo_3_network_error(access_token)

        explain_demo_4_rate_limit()
        run_demo_5_json_decode(api_client)
        run_demo_6_download_network_error(api_client)
        run_demo_7_download_unexpected_error(api_client)
        explain_demo_8_stream_warning()


if __name__ == "__main__":
    main()
